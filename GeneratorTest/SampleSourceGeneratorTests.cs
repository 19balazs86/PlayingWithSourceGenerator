namespace GeneratorTest;

public sealed class SampleSourceGeneratorTests
{
    [Fact]
    public void GenerateReportMethod()
    {
        // Arrange
        var generator = new SampleSourceGenerator();

        var driver = CSharpGeneratorDriver.Create(generator);

        var compilation = CSharpCompilation.Create(nameof(SampleSourceGeneratorTests),
            [CSharpSyntaxTree.ParseText(_sampleClassText)],
            // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'
            [MetadataReference.CreateFromFile(typeof(Attribute).Assembly.Location)]
        );

        // Act
        GeneratorDriverRunResult runResult = driver.RunGenerators(compilation).GetRunResult();

        // Assert
        SyntaxTree? generatedFileSyntax = runResult.GeneratedTrees.SingleOrDefault(syntaxTree => syntaxTree.FilePath.EndsWith("SampleEntity.g.cs"));

        Assert.NotNull(generatedFileSyntax);

        string generatedCode = generatedFileSyntax.GetText().ToString();

        Assert.Equal(_expectedGeneratedClassText, generatedCode, ignoreLineEndingDifferences: true);
    }

    private const string _sampleClassText =
        """
        namespace SampleApp;

        [Generators.Report]
        public partial class SampleEntity
        {
            public required int Id { get; init; }
            public required string Name { get; init; }
            public required int Age { get; init; }
        }
        """;

    private const string _expectedGeneratedClassText =
        """
        // <auto-generated/>

        using System;
        using System.Collections.Generic;

        namespace SampleApp;

        partial class SampleEntity
        {
            public IEnumerable<string> Report()
            {
                yield return $"Id = {this.Id}";
                yield return $"Name = {this.Name}";
                yield return $"Age = {this.Age}";
            }
        }
        """;
}